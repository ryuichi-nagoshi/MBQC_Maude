load mbqc-lang.maude

mod General-rotation is 
    pr POSTPROCESS .
    pr MEASURE .
    pr MBQC-LANG .

    var V  : Vect .
    var LB : List{TRIV2BIT} .
    var LN : List{TRIV2PNAT} .
    var LOC : List{TRIV2OUTCOME} . 

    --- Target State: Ry(π/2) . |psi>)
    --- Input: |psi> = alpha0 . |0> + beta0 . |1> 
    --- General rotation specialized to the Y-rotation: Ry(π/2) = Rz(π/2) · Rx(π/2) · Rz(-π/2)
    op GR|psi> : -> Vect .
    eq GR|psi> = 1 ./ sqrt(2) . (alpha0 .+ -1 .* beta0) . |0> + 1 ./ sqrt(2) . (alpha0 .+ beta0) . |1> .

    --- checker
    op checkGR : List{TRIV2OUTCOME} -> MyBool .
    eq checkGR((nil).List{TRIV2OUTCOME}) = true .
    ceq checkGR([LB , LN , V]  LOC) = checkGR(LOC) if | < GR|psi> | V > |^2 == 1 .
    ceq checkGR([LB , LN , V]  LOC) = false if | < GR|psi> | V > |^2 =/= 1 .

    
endm




---[Test] General rotation
red checkGR(pattern(4, < 0 @ |psi> >,
            X?(4, 1 3)
            Z?(4, 0 2)
            (zeroB, nil)[M(3, 0pi)](zeroB, nil)
            (zeroB, nil)[M(2, pi/2)](zeroB, 1)
            (zeroB, nil)[M(1, pi/2)](zeroB, 0)
            (zeroB, nil)[M(0, -pi/2)](zeroB, nil)
            E(3,4) E(2,3) E(1,2) E(0,1)
)) .