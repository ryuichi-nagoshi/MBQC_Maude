load measure.maude

mod checker is 
    pr POSTPROCESS .
    pr MEASURE .

    var N N1 N2 N3 : PNat . 
    var C C1 C2 C3 C4 : Cpx .
    var PV PV1 PV2 : PairBV .
    var B B1 B2 B3 : Bit .
    var K K1 K2 : Ket .
    var V V1 V2 V3 V4 : Vect .
    var Oc1 : Outcome .
    
    var LV : List{TRIV2VECT} . 
    var LB LB1 LB2 : List{TRIV2BIT} .
    var LN : List{TRIV2PNAT} .
    var LPBV : List{TRIV2PAIRBV} .
    var LOC : List{TRIV2OUTCOME} . 

    --------------------------------------
    --- check teleport
    op checkTlp : List{TRIV2OUTCOME} -> MyBool .

    eq checkTlp((nil).List{TRIV2OUTCOME}) = true .
    ceq checkTlp([LB , LN , V] LOC) = checkTlp(LOC) if (V == |psi>) or (V == (-1 . |psi>)) .
    ceq checkTlp([LB , LN , V] LOC) = false if (V =/= |psi>) /\ (V =/= (-1 . |psi>)) .

    
    --------------------------------------
    ---check GHZ
    op checkGHZ : List{TRIV2OUTCOME} -> MyBool .
    op |GHZ> : -> Vect .

    eq |GHZ> = (1 ./ sqrt(2)) . (|0> (x) |0> (x) |0> + |1> (x) |1> (x) |1>) .

    eq checkGHZ((nil).List{TRIV2OUTCOME}) = true .
    ceq checkGHZ([LB , LN , V]  LOC) = checkGHZ(LOC) if (V == |GHZ>) = true .
    ceq checkGHZ([LB , LN , V]  LOC) = false if (V == |GHZ>) = false .

endm



--- teleportation
red checkTlp(traceOut(X?(suc^2(0), suc(0), suc^2(0), Z?(suc^2(0), 0, suc^2(0), M(suc(0), suc^2(0), nullB, M(0, suc^2(0),nullB , < reset(suc^2(0)), Ecmd(2  ,< 0 & 1 >  < 1 & 2 > ,input(2, < 0 @ |psi> >)) >, pi0) , pi0 ))))) .


--- GHZ
red checkGHZ(traceOut(X?(suc^4(0), suc^3(0), suc^4(0), X?(suc^4(0), suc(0), suc^4(0), X?(suc^2(0), suc(0), suc^4(0), M(suc^3(0), suc^4(0), nullB, M(suc(0), suc^4(0), nullB, < reset(suc^4(0)), Ecmd(suc^4(0), (< 0 & suc(0) > < suc(0) & suc^2(0) > < suc^2(0) & suc^3(0) > < suc^3(0) & suc^4(0) >), input(suc^4(0), nil)) >, pi0), pi0)))))) .
