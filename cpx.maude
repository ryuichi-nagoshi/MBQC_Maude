fmod REAL is
    pr RAT .
    
    sorts IRat PosIRat PosReal NzReal Real .
    subsort Rat < Real .
    subsort PosIRat < IRat .
    subsort NzRat IRat < NzReal < Real .
    subsort PosRat PosIRat < PosReal < NzReal .

    --- minus operator
    op .-_ : Real -> Real .
    op .-_ : NzReal -> NzReal .
    --- additive operator
    op _.+_ : Real Real -> Real [assoc comm prec 33] .
    --- multiplicative operator
    op _.*_ : Real Real -> Real [assoc comm prec 32] .
    op _.*_ : NzReal NzReal -> NzReal [assoc comm prec 32] .
    --- division operator
    op _./_ : Real NzReal -> Real [prec 31].
    op _./_ : PosReal PosReal -> PosReal [prec 31].
    --- absolute value
    op |_| : Real -> Real .
    op |_| : NzReal -> PosReal .
    --- [todo] sqrt operator
    op sqrt : PosReal -> PosReal .

    --- comparative operators
    op _.>_  : Real Real -> Bool .
    op _.>=_ : Real Real -> Bool .
    op _.<_  : Real Real -> Bool .
    op _.<=_ : Real Real -> Bool .

    vars Rt Rt1 Rt2 : Rat .
    vars Rt' : NzRat .
    vars PRt PRt' : PosRat .
    vars IRt : IRat .
    vars R R1 R2 R3 : Real .
    vars R' R'' : NzReal .
    vars PR PR' : PosReal .

    *** additive properties
    eq Rt1 .+ Rt2 = Rt1 + Rt2 .
    eq Rt1 .* R .+ Rt2 .* R = (Rt1 + Rt2) .* R .
    eq R .+ Rt .* R = (Rt + 1) .* R .
    eq R .+ R = 2 .* R .
    
    *** multiplicative properties
    eq Rt1 .* Rt2 = Rt1 * Rt2 .
    
    *** division properties
    eq Rt ./ Rt' = Rt / Rt' .
    
    *** absolute value
    eq | Rt | = abs(Rt) .
    eq | PR | = PR .
    eq | R1 .* R2 | = | R1 | .* | R2 | .
    eq | 1 ./ R' | = 1 ./ | R' | .
    
    *** comparation for rational numbers
    eq Rt1 .< Rt2 = Rt1 < Rt2 .
    eq Rt1 .> Rt2 = Rt1 > Rt2 .
    eq Rt1 .<= Rt2 = Rt1 <= Rt2 .
    eq Rt1 .>= Rt2 = Rt1 >= Rt2 .
    
    --- for positive rational numbers
    eq sqrt(PRt / PRt') = sqrt(PRt) .* (1 ./ sqrt(PRt')) .
    eq sqrt(PRt) .* (Rt / PRt) = Rt .* (1 ./ sqrt(PRt)) .
    --- for positive real numbers
    eq [test1] : sqrt(PR) .* sqrt(PR) = PR .
    eq [test2] : 1 ./ sqrt(PR) .* 1 ./ sqrt(PR) = 1 ./ PR .
    eq [test3] : sqrt(PR .* PR') = sqrt(PR) .* sqrt(PR') .
    eq [test4] : sqrt(PR) .* (1 ./ PR) = 1 ./ sqrt(PR) .
    eq [test5] : PR .* (1 ./ sqrt(PR)) = sqrt(PR) .

    eq sqrt(1) = 1 .
    eq sqrt(4) = 2 .
    eq sqrt(8) = 2 .* sqrt(2) .
    eq sqrt(16) = 4 .
endfm

fmod CPX is
    pr REAL .

    sorts Cpx Imag NzImag NzCpx .
    subsort Real < Cpx .
    subsort NzReal < NzCpx .
    subsorts NzImag < NzCpx Imag < Cpx .
    subsorts Zero < Imag .

    --- imaginary part
    op _i : Real -> Imag .
    op _i : NzReal -> NzImag .
    --- minus operator
    op .-_ : Cpx -> Cpx .
    op .-_ : NzCpx -> NzCpx .
    --- additive operator
    op _.+_ : Cpx Cpx -> Cpx [assoc comm prec 33] .
    op _.+_ : NzReal NzImag -> NzCpx [assoc comm prec 33] .
    --- multiplicative operator
    op _.*_ : Cpx Cpx -> Cpx [comm assoc prec 32] .
    op _.*_ : NzCpx NzCpx -> NzCpx [comm assoc prec 32] .
    --- division operator
    op _./_ : Cpx NzCpx -> Cpx [prec 31] .
    --- conjugate operator
    op (_)^* : Cpx -> Cpx [prec 30] .
    --- absolute value
    op |_| : Cpx -> Real .
    op |_| : NzCpx -> PosReal .
    --- absolute square
    op |_|^2 : Cpx -> Real .
    op |_|^2 : NzCpx -> PosReal .
    --- 
    op sqrt : NzImag -> Cpx .
    

    vars Rt Rt1 Rt2 : Rat .
    vars R R1 R2 S S1 S2 : Real .
    vars R' R'' S' S'' : NzReal .
    vars PR : PosReal .
    vars A B C C1 C2 : Cpx .
    vars A' B' C' C1' C2' : NzCpx .
    vars I I1 I2 : NzImag .


    *** purely imaginary
    eq 0 i = 0 .
    
    *** minus properties
    eq .- C = (-1) .* C .

    *** additive properties
    eq (R i) .+ (S i) = (R .+ S) i .
    eq A .* I1 .+ A .* I2 = A .* (I1 .+ I2) .
    --- [symbolic]
    eq C .+ 0 = C .
    ceq R1 .* C .+ R2 .* C = (R1 .+ R2) .* C if not C :: Real .
    ceq C .+ R .* C = (R .+ 1) .* C if not C :: Real .
    ceq C .+ C = 2 .* C if not C :: Real .
    eq A .+ ((-1) .* A) = 0 .
    *** distributive law
    eq A .* (B .+ C)  = (A .* B) .+ (A .* C) . 
    eq R .* (B .+ C)  = (R .* B) .+ (R .* C) .
    *** multiplicative properties
    eq R .* (S i) = (R .* S) i .
    eq (R i) .* (S i) = .- (R .* S) .
    eq ((R i) .+ S) .* C = (R i) .* C .+ S .* C . 
    --- [symbolic]
    eq C .* 0 = 0 .
    eq C .* 1 = C .
    eq C' .* (1 ./ C') = 1 .
    
    *** division properties
    --- divide a non real number
    eq (S' i) ./ R'' = (S' ./ R'') i .
    eq (R' .+ (S' i)) ./ R'' = (R' ./ R'') .+ ((S' ./ R'') i) .
    --- divide a complex number
    eq A ./ (R' i) = A .* (((- 1) ./ R') i) .
    eq A ./ (R'' .+ (R' i)) = A .* ((R'' ./ |(R'' .+ (R' i))|^2) .+ (((.- R') ./ |(R'' .+ (R' i))|^2) i)) .
    --- [symbolic]
    ceq C ./ C' = C .* (1 ./ C') if C =/= 1 .
    eq 1 ./ (C1' .* C2') = (1 ./ C1') .* (1 ./ C2') .
    eq 1 ./ (1 ./ C') = C' .

    *** conjugate properties
    eq (R)^* = R .
    eq (S' i)^* = ((.- S') i) .
    eq (R' .+ (S' i))^* = R' .+ ((.- S') i) .
    --- [symbolic]
    eq (C1 .+ C2)^* = (C1)^* .+ (C2)^* .
    eq (C1 .* C2)^* = (C1)^* .* (C2)^* .
    eq (C1 ./ C2')^* = (C1)^* ./ (C2')^* .

    *** absolute value
    eq | S' i | = | S' | .
    eq | (R' .+ (S' i)) | = sqrt((R' .+ (S' i)) .* (R' .+ (S' i))^*) .

    *** absolute square
    eq | C |^2 = C .* (C)^* .
endfm